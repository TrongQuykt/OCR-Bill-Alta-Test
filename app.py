import streamlit as st
from process_invoice import extract_invoice_data
import os
import tempfile
import logging

# C√°c h√†m ph·ª• tr·ª£
def generate_csv(result):
    """T·∫°o file CSV t·ª´ k·∫øt qu·∫£"""
    import csv
    import io
    
    output = io.StringIO()
    writer = csv.writer(output)
    writer.writerow(['Tr∆∞·ªùng', 'Gi√° tr·ªã'])
    writer.writerow(['S·ªë h√≥a ƒë∆°n', result['invoice_number']])
    writer.writerow(['T·ªïng ti·ªÅn', result['total_amount']])
    
    return output.getvalue()

def create_history_dataframe():
    """T·∫°o DataFrame t·ª´ l·ªãch s·ª≠"""
    import pandas as pd
    
    # T·∫°o DataFrame t·ª´ l·ªãch s·ª≠
    df = pd.DataFrame(st.session_state.history)
    
    # Th√™m c·ªôt tr·∫°ng th√°i
    df['status'] = df.apply(
        lambda row: 
            "‚úÖ Th√†nh c√¥ng" if "kh√¥ng t√¨m th·∫•y" not in row['invoice_number'].lower() and "kh√¥ng t√¨m th·∫•y" not in row['total_amount'].lower()
            else "‚ö†Ô∏è M·ªôt ph·∫ßn" if not ("kh√¥ng t√¨m th·∫•y" in row['invoice_number'].lower() and "kh√¥ng t√¨m th·∫•y" in row['total_amount'].lower())
            else "‚ùå Th·∫•t b·∫°i",
        axis=1
    )
    
    return df

def convert_df_to_csv(df):
    """Chuy·ªÉn ƒë·ªïi DataFrame th√†nh CSV"""
    return df.to_csv(index=False).encode('utf-8')

def clear_history():
    """X√≥a l·ªãch s·ª≠"""
    st.session_state.history = []
    st.experimental_rerun()

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Thi·∫øt l·∫≠p c·∫•u h√¨nh trang
st.set_page_config(
    page_title="Tr√≠ch Xu·∫•t H√≥a ƒê∆°n Th√¥ng Minh",
    page_icon="üìÑ",
    layout="centered",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        background-color: #1e293b;
        padding: 20px;
        border-radius: 10px;
        color: #f1f5f9;
    }
    .stButton>button {
        background-color: #10b981;
        color: #ffffff;
        border-radius: 8px;
        padding: 10px 20px;
        font-weight: bold;
    }
    .stFileUploader {
        border: 2px dashed #64748b;
        border-radius: 10px;
        padding: 20px;
        background-color: #334155;
        color: #f1f5f9;
    }
    .stSpinner {
        color: #10b981;
    }
    .result-box {
        background-color: #334155;
        padding: 15px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.2);
        margin-top: 20px;
        color: #f1f5f9;
    }
    .title {
        color: #ffffff;
        font-size: 2.5em;
        font-weight: bold;
        text-align: center;
        margin-bottom: 10px;
    }
    .subtitle {
        color: #cbd5e1;
        font-size: 1.2em;
        text-align: center;
        margin-bottom: 30px;
    }
    .success-message {
        background-color: #064e3b;
        color: #6ee7b7;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
    }
    .error-message {
        background-color: #7f1d1d;
        color: #f87171;
        padding: 10px;
        border-radius: 5px;
        margin-top: 10px;
    }
    .data-item {
        background-color: #283548;
        padding: 12px;
        border-radius: 8px;
        margin-bottom: 10px;
        border-left: 4px solid #10b981;
    }
    .data-label {
        font-weight: bold;
        color: #cbd5e1;
    }
    .data-value {
        font-size: 1.1em;
        color: #ffffff;
    }
    </style>
""", unsafe_allow_html=True)

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ
st.markdown('<div class="title">Tr√≠ch Xu·∫•t Th√¥ng Tin H√≥a ƒê∆°n</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">T·∫£i l√™n ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ tr√≠ch xu·∫•t s·ªë h√≥a ƒë∆°n v√† t·ªïng ti·ªÅn.</div>', unsafe_allow_html=True)

# Sidebar
with st.sidebar:
    st.header("‚ÑπÔ∏è Th√¥ng Tin")
    st.markdown("""
    - **ƒê·ªãnh d·∫°ng h·ªó tr·ª£**: PNG, JPG, JPEG
    - **K√≠ch th∆∞·ªõc t·ªëi ƒëa**: 10MB
    - **Th·ªùi gian x·ª≠ l√Ω**: ~5-10 gi√¢y
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    st.markdown("**H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**")
    st.markdown("""
    1. T·∫£i l√™n ·∫£nh h√≥a ƒë∆°n r√µ n√©t.
    2. Ch·ªù h·ªá th·ªëng x·ª≠ l√Ω v√† tr√≠ch xu·∫•t th√¥ng tin.
    3. Xem k·∫øt qu·∫£ bao g·ªìm s·ªë h√≥a ƒë∆°n v√† t·ªïng ti·ªÅn.
    """, unsafe_allow_html=True)

# T·∫°o tabs
tab1, tab2 = st.tabs(["üì§ T·∫£i l√™n h√≥a ƒë∆°n", "üìä L·ªãch s·ª≠"])

with tab1:
    # Widget t·∫£i file
    uploaded_file = st.file_uploader("üì§ Ch·ªçn ·∫£nh h√≥a ƒë∆°n", type=["png", "jpg", "jpeg"])

    # Ki·ªÉm so√°t x·ª≠ l√Ω
    process_btn = st.button("üîç X·ª≠ l√Ω h√≥a ƒë∆°n", type="primary", disabled=uploaded_file is None)

    if uploaded_file is not None:
        # Hi·ªÉn th·ªã ·∫£nh ƒë√£ t·∫£i l√™n
        st.image(uploaded_file, caption="·∫¢nh h√≥a ƒë∆°n ƒë√£ t·∫£i l√™n", use_column_width=True)
        
        if process_btn:
            # L∆∞u file t·∫°m th·ªùi
            with tempfile.NamedTemporaryFile(delete=False) as temp_file:
                temp_file_path = temp_file.name
                temp_file.write(uploaded_file.getbuffer())
            
            # X·ª≠ l√Ω ·∫£nh v√† tr√≠ch xu·∫•t th√¥ng tin
            with st.spinner("‚è≥ ƒêang x·ª≠ l√Ω h√≥a ƒë∆°n..."):
                try:
                    result = extract_invoice_data(temp_file_path)
                    
                    # Ki·ªÉm tra k·∫øt qu·∫£ tr√≠ch xu·∫•t
                    extraction_success = (result['invoice_number'] != "Kh√¥ng t√¨m th·∫•y s·ªë h√≥a ƒë∆°n" and 
                                         result['total_amount'] != "Kh√¥ng t√¨m th·∫•y t·ªïng ti·ªÅn")
                    
                    if extraction_success:
                        st.markdown('<div class="success-message">‚úÖ X·ª≠ l√Ω ho√†n t·∫•t!</div>', unsafe_allow_html=True)
                    else:
                        st.markdown('<div class="error-message">‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë·∫ßy ƒë·ªß th√¥ng tin.</div>', unsafe_allow_html=True)
                    
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.markdown('<div class="result-box">', unsafe_allow_html=True)
                    st.subheader("K·∫øt qu·∫£ tr√≠ch xu·∫•t")
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown(f'<div class="data-item"><span class="data-label">S·ªë h√≥a ƒë∆°n:</span><br/><span class="data-value">{result["invoice_number"]}</span></div>', unsafe_allow_html=True)
                    with col2:
                        st.markdown(f'<div class="data-item"><span class="data-label">T·ªïng ti·ªÅn:</span><br/><span class="data-value">{result["total_amount"]}</span></div>', unsafe_allow_html=True)
                    
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Ph·∫ßn xem to√†n b·ªô vƒÉn b·∫£n ƒë√£ tr√≠ch xu·∫•t
                    with st.expander("üìú Xem to√†n b·ªô vƒÉn b·∫£n tr√≠ch xu·∫•t", expanded=False):
                        st.text_area("VƒÉn b·∫£n ƒë·∫ßy ƒë·ªß", result['full_text'], height=200, disabled=True)
                    
                    # L∆∞u k·∫øt qu·∫£ v√†o session state ƒë·ªÉ hi·ªÉn th·ªã trong tab l·ªãch s·ª≠
                    if 'history' not in st.session_state:
                        st.session_state.history = []
                    
                    st.session_state.history.append({
                        'invoice_number': result['invoice_number'],
                        'total_amount': result['total_amount'],
                        'timestamp': "H√¥m nay"
                    })
                    
                    # N√∫t t·∫£i xu·ªëng
                    st.download_button(
                        label="üíæ T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)",
                        data=generate_csv(result),
                        file_name=f"invoice_{result['invoice_number']}.csv",
                        mime="text/csv"
                    )

                except Exception as e:
                    logger.error(f"L·ªói khi x·ª≠ l√Ω: {str(e)}")
                    st.markdown(f'<div class="error-message">‚ùå L·ªói khi x·ª≠ l√Ω: {str(e)}</div>', unsafe_allow_html=True)

                finally:
                    # X√≥a file t·∫°m
                    if os.path.exists(temp_file_path):
                        os.remove(temp_file_path)
    else:
        st.info("üìå Vui l√≤ng t·∫£i l√™n ·∫£nh h√≥a ƒë∆°n ƒë·ªÉ b·∫Øt ƒë·∫ßu.", icon="‚ÑπÔ∏è")

with tab2:
    st.header("üìä L·ªãch s·ª≠ tr√≠ch xu·∫•t")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ n·∫øu c√≥
    if 'history' in st.session_state and st.session_state.history:
        # T·∫°o DataFrame t·ª´ l·ªãch s·ª≠
        history_df = create_history_dataframe()
        
        # Hi·ªÉn th·ªã b·∫£ng l·ªãch s·ª≠
        st.dataframe(
            history_df,
            column_config={
                "invoice_number": "S·ªë h√≥a ƒë∆°n",
                "total_amount": "T·ªïng ti·ªÅn",
                "timestamp": "Th·ªùi gian",
                "status": "Tr·∫°ng th√°i"
            },
            hide_index=True,
            use_container_width=True
        )
        
        # N√∫t x√≥a l·ªãch s·ª≠
        st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠", on_click=clear_history)
    else:
        st.info("üìå Ch∆∞a c√≥ d·ªØ li·ªáu l·ªãch s·ª≠.", icon="‚ÑπÔ∏è")

# Footer
st.markdown("---")
st.markdown('<div style="text-align: center; color: #cbd5e1;">Powered by Streamlit</div>', unsafe_allow_html=True)